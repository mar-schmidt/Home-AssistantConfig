# inspired from https://github.com/CCOSTAN/Home-AssistantConfig
# service: script.speech_engine
# data:
#   call_dark_outside:
#   call_window_check:
#   call_garage_check:
#   call_responsibilities
#   call_light_check
#   call_inside_weather
#   call_outside_weather
script:
  speech_engine:
    sequence:
      - condition: or
        conditions:
          - condition: state
            entity_id: group.family_devices
            state: 'home'
          #- condition: state
          #  entity_id: input_boolean.guest_mode
          #  state: 'on'

      - service: script.speech_processing
        data_template:
          speech_message: >
            {%- macro dark_outside() -%}
                {{ [
                "It is pretty dark outside.  I will turn on the outside lights now.",
                "It is a little past Sunset. Time to turn on the outside lights. I am on it.",
                "I will switch on the outside lights.  It is getting dark outside.",
                "Time to turn on the front lights. I will take care of it."
                ] | random }}
            {%- endmacro -%}

            {%- macro inside_weather() -%}
                Inside the house, it is {{ states.climate.downstairs.attributes["current_temperature"]}} degrees with around {{states('sensor.downstairs_thermostat_humidity')}} percent humidity.
            {%- endmacro -%}

            {%- macro outside_weather() -%}
                Outside, it is going to be {{states('sensor.dark_sky_minutely_summary')}}
            {%- endmacro -%}

            {%- macro light_check() -%}
                {% if states.group.all_lights.state != 'off' -%}
                There are
                {% for state in states.light if state.state == 'on' -%}
                  {%- if loop.last -%}
                    {{ loop.index }}
                  {%- endif -%}
                {%- endfor %}  lights on right now.
                {% set comma = joiner(', ') %} The
                {% for group in states.group|groupby('state') -%}
                  {%- for entity in group.list if entity.state == 'on' and entity.name.split(' ')[1]|lower == 'lights' and entity.name.split(' ')[0]|lower != 'all' and entity.name.split(' ')[0]|lower != 'interior' -%}
                  {{ ' and' if loop.last and not loop.first else comma() }}
                  {{ entity.name }}
                  {%- endfor -%}
                {%- endfor -%}
                .
                {%- endif -%}
            {%- endmacro -%}

            {%- macro window_check() -%}
                {% if states.group.entry_points.state != 'off' -%}
                {% set comma = joiner(', ') %}
                The
                {%- for state in states.binary_sensor if state.state == 'on' and state.attributes.device_class == 'opening' -%}
                {%- endfor %}
                {% for group in states.binary_sensor|groupby('state') -%}
                {%- for entity in group.list  if entity.state == 'on' and entity.attributes.device_class == 'opening'  -%}
                {{ ' and' if loop.last and not loop.first else comma() }}
                {{ entity.attributes.friendly_name }}
                {%- endfor -%}
                {%- endfor %}
                need to be closed.
                {%- endif -%}
            {%- endmacro -%}

            {% macro garage_check() %}
                {% if states.group.garage_doors.state !='closed' -%}
                The
                {%- for state in states.cover -%}
                {%- endfor %}
                {% for group in states.cover|groupby('state') -%}
                {%- for entity in group.list  if entity.state == 'open' and entity.attributes.device_class == 'garage'  -%}
                {{ ' and' if loop.last and not loop.first }}
                {{ entity.attributes.friendly_name }}
                {%- endfor -%}
                {%- endfor %}
                need to be closed.
                {%- endif -%}
            {%- endmacro -%}

            {% macro iss() %}
                {% if is_state('binary_sensor.iss', 'on') -%}
                  Here is something interesting.  The international space station is above us now.  There are {{ states.binary_sensor.iss.attributes["number_of_people_in_space"]}} people in space right now.
                  {{outside_weather()}}
                {% endif -%}
            {%- endmacro -%}

            {% macro pihole() %}
                {% if states.sensor.pihole_ads_blocked_today.state|int > 10000 -%}
                  Our internet blocking system has blocked {{states.sensor.pihole_ads_blocked_today.state}} ads today!
                  Happy Internet surfing!
                {% endif -%}
            {%- endmacro -%}

            {% macro moon() -%}
              {%- if states.sensor.moon.state == 'Full moon' -%}
              Check out the full moon tonight!
              {%- endif -%}
            {%- endmacro %}

            {#  ********************************************* #}
            {#   ******** Start the Speech routines *******   #}
            {#  ********************************************* #}
              {{ personarriving }}

              {{ goodmorninggreeting }}

              {% if call_inside_weather == 1 %}
                {{ inside_weather() }}
              {%endif%}

              {% if call_outside_weather == 1 and is_state('sun.sun', 'above_horizon') %}
                {{ outside_weather() }}
              {%endif%}

              {% if call_dark_outside == 1 %}
                {{ dark_outside() }}
              {%endif%}

              {% if call_garage_check == 1 or is_state('sun.sun', 'below_horizon') %}
                {{ garage_check() }}
              {%endif%}

              {% if (call_window_check == 1 or is_state('sun.sun', 'below_horizon')) or is_state('group.entry_points', 'on') %}
                {{ window_check() }}
              {%endif%}

              {% if call_light_check == 1 %}
                {{ light_check() }}
              {%endif%}


  speech_processing:
    sequence:
      - service: logbook.log
        data_template:
          name: TTS
          message: '{{ speech_message }}'
      #- service: media_player.sonos_snapshot
      #  data_template:
      #    entity_id:
      #      - media_player.kitchen
      - service: media_player.volume_set
        entity_id:
          - media_player.kitchen
        data_template:
          volume_level: >
            {% if now().strftime("%H")|int < 12 and now().strftime("%H")|int > 6%}
              0.4
            {% elif now().strftime("%H")|int > 12 and now().strftime("%H")|int < 21%}
              0.5
            {% else %}
              0.4
            {% endif %}
      - service: tts.amazon_polly_say
        entity_id:
          - media_player.kitchen
        data_template:
          message: '{{ speech_message }}'
          cache: true
      #- delay: '00:00:15'
      #- service: media_player.sonos_restore
      #  data_template:
      #    entity_id:
      #      - media_player.kitchen
